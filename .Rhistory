ysidata <- ysidata%>% filter(data_flag!="R",loc_type==ResourceType)
Park<- "KAHO"
LocType <- c("Groundwater")
selectnutdata <- nutdata %>%
filter(unit_code==Park,loc_type%in%LocType,station_type=="Fixed")
selectysidata <- ysidata %>%
filter(unit_code==Park,loc_type%in%LocType,station_type=="Fixed")
#QAvgNutPlotColorBy(selectnutdata,"TDN","TDN","TDN",axis.digits=1,colorby="station_id")
#QAvgYsiPlotColorBy(selectysidata,"Sal","Salinity","Salinity",axis.digits=1,colorby="station_id")
ComboPlotFuncColorBy(selectnutdata,selectysidata,type=ResourceType,years=Years,yearrange=YearRange,graphtitle="Water Quality at KAHO",colorby="station_id")
usethis::dump(QAvgNutPlotColorBy,file="R/QAvgNutPlotColorBy.R")
library(usethis)
dump(QAvgNutPlotColorBy,file="R/QAvgNutPlotColorBy.R")
dump("QAvgNutPlotColorBy",file="R/QAvgNutPlotColorBy.R")
dump("QAvgYsiPlotColorBy",file="R/QAvgYsiPlotColorBy.R")
dump("ComboPlotFuncColorBy",file="R/ComboPlotFuncColorBy.R")
source("~/PACNAquaticWaterQuality/R/QAvgYsiPlot.R")
roxygen2::roxygenize()
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
devtools::install()
install()
devtools::install()
install.packages(devtools)
install.packages("devtools")
install.packages("roxygen")
install.packages("roxygen2")
devtools::install()
devtools::install("PACNAquaticWaterQuality")
devtools::load_all()
devtools::install()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggpubr)
library(here)
library(tidyverse)
library(janitor)
library(gridExtra)
library(cowplot)
# Change Park and Years as Necessary
Park <- "KALA"
NewReport <- "2057" # Enter New Report Number
years<-c(2007,2009,2011,2013,2015,2017,2019,2021,2023) #x axis values. Adjust as necessary in subsequent years.
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",text=element_text(size=14)),scale_x_continuous(breaks=years, limits =c(2007,2023)),scale_colour_manual(values=c("Old" = "green","New" = "red")))
my_theme_avg_marine<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",text=element_text(size=14)),scale_x_continuous(breaks=years, limits =c(2007,2023)),scale_colour_manual(values=c("Old Bottom" = "green","Old Surface" = "blue","New Bottom" = "orange","New Surface" = "red")))
my_theme_raw<- list(geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",text=element_text(size=14)),scale_x_continuous(breaks=years, limits=c(2007,2023)),scale_colour_manual(values=c("Old" = "green","New" = "red")))
my_theme_raw_marine<- list(geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",text=element_text(size=14)),scale_x_continuous(breaks=years, limits=c(2007,2023)),scale_colour_manual(values=c("Old Bottom" = "green","Old Surface" = "blue","New Bottom" = "orange","New Surface" = "red")))
# Input data
## Certified
certifiednutdata <- clean_names(read_csv(here("data","20230403_Results_Nutrients_CertifiedCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## 2018 Working Copy
uncertifiednutdata1 <-clean_names(read_csv(here("data","20230403_Results_Nutrients_2018WorkingCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## 2019 Working Copy
uncertifiednutdata2 <-clean_names(read_csv(here("data","20230403_Results_Nutrients_2019WorkingCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## 2020 Working Copy
uncertifiednutdata3 <-clean_names(read_csv(here("data","20230403_Results_Nutrients_2020WorkingCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## 2021 Working Copy
uncertifiednutdata4 <-clean_names(read_csv(here("data","20230403_Results_Nutrients_2021WorkingCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## 2022 Working Copy
uncertifiednutdata5 <-clean_names(read_csv(here("data","20240111_Results_Nutrients_2022KALAHALEWorkingCopy.csv"), col_types=cols("Start_Date" = col_date(format="%m/%d/%Y"),"Pool_Group"=col_character())))
## Merge and filter to desired park
nutdata <- rbind(certifiednutdata,uncertifiednutdata1,uncertifiednutdata2,uncertifiednutdata3,uncertifiednutdata4,uncertifiednutdata5)
nutdata <- nutdata %>%
filter(unit_code==Park,qa_flag==0,data_flag%in%c("P","A","AE",NA))%>%
mutate(Report_Status = replace_na(ifelse(lab_report_number %in% NewReport,"New","Old"),"Old"))%>%
mutate(#Report_Status = #ifelse(lab=="ENVIRMON","EMT",Report_Status),
Status_Depth = paste(Report_Status,depth),collaspe="")
newnutdata <- nutdata %>% filter (Report_Status == "New")
oldnutdata <- nutdata %>% filter (Report_Status == "Old")
#emtnutdata <- nutdata %>% filter (Report_Status == "EMT")
# Set key for year quarter range
# This is needed to make breaks in the plot lines when data is missing
# There is probably a more concise way to do this.
yearquarters<-unique(nutdata$year_quarter)
yearquarters_old <-unique(oldnutdata$year_quarter)
yearquarters_new <-unique(newnutdata$year_quarter)
#yearquarters_emt <-unique(emtnutdata$year_quarter)
minyearquarter_old<-min(yearquarters_old)
maxyearquarter_old<-max(yearquarters_old)
minyearquarter_new<-min(yearquarters_new)
maxyearquarter_new<-max(yearquarters_new)
#minyearquarter_emt<-min(yearquarters_emt)
#maxyearquarter_emt<-max(yearquarters_emt)
minyearquarter<-min(yearquarters)
maxyearquarter<-max(yearquarters)
yearquarterscomplete<-seq(minyearquarter,maxyearquarter,by=0.25)
yearquarterscomplete_old<-seq(minyearquarter_old,maxyearquarter_old,by=0.25)
yearquarterscomplete_new<-seq(minyearquarter_new,maxyearquarter_new,by=0.25)
#yearquarterscomplete_emt<-seq(minyearquarter_emt,maxyearquarter_emt,by=0.25)
status<-data.frame(Report_Status=c("Old","New"))
status_depth_old <- data.frame(Status_Depth=c("Old Bottom","Old Surface"))
status_depth_new <- data.frame(Status_Depth=c("New Bottom","New Surface"))
#status_depth_emt <- data.frame(Status_Depth=c("EMT Bottom","EMT Surface"))
alldates<-merge(status,data.frame(list(year_quarter=yearquarterscomplete)))
alldates_marine_old <-merge(status_depth_old,data.frame(list(year_quarter=yearquarterscomplete_old)))
alldates_marine_new <-merge(status_depth_new,data.frame(list(year_quarter=yearquarterscomplete_new)))
#alldates_marine_emt <-merge(status_depth_emt,data.frame(list(year_quarter=yearquarterscomplete_emt)))
alldates_marine <-rbind(alldates_marine_old,alldates_marine_new)
#### Average Plot Functions ####
QAvgNutPlot<-function(x,param,main.title,y.label,axis.digits){
y.limits<-c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
nutdata2<- x[x$parameter==param,] %>%
select(year,quarter,year_quarter,mean_value,Report_Status)%>%
group_by(year_quarter,Report_Status)%>%
summarize(average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
nutdata3 <- left_join(alldates,nutdata2,join_by("year_quarter","Report_Status"))
limits<- aes(ymin=errordown,ymax=errorup)
avgplot <- qplot(year_quarter, average_value,
data=nutdata3,
xlab="Date",
ylab=y.label,
color = Report_Status,
main=main.title)
avgplotformatted <- avgplot +my_theme_avg + geom_errorbar(limits) + scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
return(avgplotformatted)
}
QRawNutPlot<-function(x,param,main.title,y.label,axis.digits){
Raw <- qplot(year_quarter, mean_value,
data=x[x$parameter==param,],
color=Report_Status,
xlab="Date",
ylab=y.label,
main=main.title)
y.limits<-c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
rawplotformatted <- Raw + my_theme_raw + scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
return(rawplotformatted)
}
QRawNutPlot_marine<-function(x,param,main.title,y.label,axis.digits){
x<- x[x$depth=="Surface"|x$depth=="Bottom",]
Raw <- qplot(year_quarter, mean_value,
data=x[x$parameter==param,],
color=Status_Depth,
xlab="Date",
ylab=y.label,
main=main.title)
y.limits<-c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
rawplotformatted <- Raw + my_theme_raw_marine + scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
return(rawplotformatted)
}
QAvgNutPlot_marine<-function(x,param,main.title,y.label,axis.digits){
y.limits <- c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
surnutdata<- x %>%
filter(parameter==param&depth=="Surface")%>%
select(year,quarter,year_quarter,depth, Report_Status, Status_Depth,mean_value)%>%
group_by(year_quarter,depth, Report_Status, Status_Depth)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
botnutdata<- x %>%
filter(parameter==param&depth=="Bottom")%>%
select(year,quarter,year_quarter,depth, Report_Status, Status_Depth,mean_value)%>%
group_by(year_quarter,depth, Report_Status, Status_Depth)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
nutdata2 <- rbind(surnutdata,botnutdata)
nutdata2 <- left_join(alldates_marine,nutdata2,join_by("year_quarter","Status_Depth"))
limits<- aes(ymin=nutdata2$errordown,ymax=nutdata2$errorup)
avgplot <- qplot(year_quarter, average_value,
data=nutdata2,
xlab="Date",
ylab=y.label,
colour=Status_Depth,
main=main.title)
avgplotformatted <- avgplot +my_theme_avg_marine +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
#save as jpeg
#ggsave(paste(param,"AvgGraph.jpg"),plot = avgplotformatted, width = 7, height = 5)
return(avgplotformatted)
}
View(status_depth_new)
View(alldates_marine_old)
# This function creates X, Y, Z columns from the sfc_point object in the data.frame
sfc_as_cols <- function(x, names = c("x","y")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
dump("sfc_as_cols",file="R/sfc_as_cols.R")
gdb_table_wq <- function(gdb_name, gdb_location, gdb_layer){
# Create path for gdb from location and name
gdb_path <- paste0(gdb_location, "/", gdb_name)
# Layer File with attributes
attributes <- sf::read_sf(gdb_path, gdb_layer)
# Attachments Table containing photos
layer_attach <- paste0(gdb_layer,"__ATTACH")
attachments <- sf::read_sf(gdb_path, layer_attach)
# Join the layer data with the _attach table
joined_table <- attachments %>%
dplyr::left_join(attributes, by = c("REL_GLOBALID" = "GlobalID"))
# Apply function to get coordinates for the joined_table
df <- joined_table$SHAPE
coords<- sf::st_coordinates(df)
# Make a date_time column appropriate for file names
joined_table <- joined_table %>%
dplyr::mutate(date_time_photo = as.character(CreationDate)) %>%
dplyr::mutate(date_time_file = lubridate::date(CreationDate))%>%
dplyr::mutate(date_time_file = str_replace_all(date_time_file,"-",""))%>%
cbind(coords)%>% #add the x,y,z coordinates
dplyr::mutate(hash = str_c(date_time_file,station_id,photo_subject)) %>% #creates a field called hash which has the fields that will be in filename
dplyr::group_by(hash) %>%
dplyr::mutate(duplication_id = seq(n())-1) %>% #checks for duplication of the filename hash field and add a sequence number for duplicates
dplyr::ungroup ()%>%
dplyr::mutate(tag = ifelse(duplication_id==0,"",paste0("_",duplication_id)), #replaces duplication id of zero with nothing
Location_Name = ifelse(is.na(Location_Name)," ",Location_Name)) #replace NA in Location_Name with a space
return(joined_table)
}
dump("gdb_table_wq",file="R/gdb_table_wq.R")
# Create a R function to apply to each photo (i.e. each row of the joined table)
watermark <- function(x, new_folder) {
# Get watermarking info from the table (x)
p.dt_photo <- x["date_time_photo"]
p.title<-paste(x["unit_code"],"Water Quality Monitoring",sep=" ")
p.direction<- x["photo_subject"]
p.locname<-x["Location_Name"]
p.type<-x["Location_Type"]
p.site <- x["station_id"]
p.user <- x["Editor"]
p.tag <- x["tag"]
p.filename<-paste(x["date_time_file"],p.site,"WQ",p.type,p.direction,sep="_")
p.filename.tag<-paste0(p.filename,p.tag) #added tag separately because it already includes the "_"
p.lat <- x$Y
p.lat <- round(p.lat,6)
p.long <- x$X
p.long <- round(p.long,6)
# Create paths and folders to save each photo
dir.create(here(new_folder), recursive = TRUE, showWarnings = FALSE )
out.path <- here(new_folder)
out.name <- file.path(out.path, paste0(p.filename.tag,".jpg"))
print(out.name)
# Load photo
image.x <- x["DATA"] %>%
purrr::pluck(1)
img.x <- magick::image_read(image.x)
# Apply auto-orientation "image_orient()" which tries to infer the correct orientation
#' from the Exif data.
img.x2 <- magick::image_orient(img.x)
# ---- Watermark photo -----
# northwest corner
nw <- dplyr::case_when(p.type=="FW" ~ paste(p.title,p.locname,sep="\n"),
p.type=="MR" ~ paste(p.title,p.locname,sep="\n"),
p.type=="AP" ~ paste(p.title),
p.type=="BB" ~ paste(p.title,p.locname,sep="\n"),
TRUE ~ NA)
img.x2 <- magick::image_annotate(img.x2, nw,
size = 25,
gravity = "northwest",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# top center
n <- paste(p.direction)
img.x2 <- magick::image_annotate(img.x2, n,
size = 25,
gravity = "north",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# northeast corner
ne <- dplyr::case_when(p.type=="FW" ~ paste(p.site),
p.type=="MR" ~ paste(p.site),
p.type=="AP" ~ paste(p.site,p.locname,sep="\n"),
p.type=="BB" ~ paste(p.site),
TRUE ~ NA)
img.x2 <- magick::image_annotate(img.x2, ne,
size = 25,
gravity = "northeast",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# southwest corner
sw <- paste(p.dt_photo)
img.x2 <- magick::image_annotate(img.x2, sw,
size = 25,
gravity = "southwest",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# southeast corner
se <- paste(p.lat,p.long,sep="\n")
img.x2 <- magick::image_annotate(img.x2, se,
size = 25,
gravity = "southeast",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# Save photo
magick::image_write(img.x2, path = out.name, format = "jpg")
}
# Create a R function to apply to each photo (i.e. each row of the joined table)
watermark_wq <- function(x, new_folder) {
# Get watermarking info from the table (x)
p.dt_photo <- x["date_time_photo"]
p.title<-paste(x["unit_code"],"Water Quality Monitoring",sep=" ")
p.direction<- x["photo_subject"]
p.locname<-x["Location_Name"]
p.type<-x["Location_Type"]
p.site <- x["station_id"]
p.user <- x["Editor"]
p.tag <- x["tag"]
p.filename<-paste(x["date_time_file"],p.site,"WQ",p.type,p.direction,sep="_")
p.filename.tag<-paste0(p.filename,p.tag) #added tag separately because it already includes the "_"
p.lat <- x$Y
p.lat <- round(p.lat,6)
p.long <- x$X
p.long <- round(p.long,6)
# Create paths and folders to save each photo
dir.create(here(new_folder), recursive = TRUE, showWarnings = FALSE )
out.path <- here(new_folder)
out.name <- file.path(out.path, paste0(p.filename.tag,".jpg"))
print(out.name)
# Load photo
image.x <- x["DATA"] %>%
purrr::pluck(1)
img.x <- magick::image_read(image.x)
# Apply auto-orientation "image_orient()" which tries to infer the correct orientation
#' from the Exif data.
img.x2 <- magick::image_orient(img.x)
# ---- Watermark photo -----
# northwest corner
nw <- dplyr::case_when(p.type=="FW" ~ paste(p.title,p.locname,sep="\n"),
p.type=="MR" ~ paste(p.title,p.locname,sep="\n"),
p.type=="AP" ~ paste(p.title),
p.type=="BB" ~ paste(p.title,p.locname,sep="\n"),
TRUE ~ NA)
img.x2 <- magick::image_annotate(img.x2, nw,
size = 25,
gravity = "northwest",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# top center
n <- paste(p.direction)
img.x2 <- magick::image_annotate(img.x2, n,
size = 25,
gravity = "north",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# northeast corner
ne <- dplyr::case_when(p.type=="FW" ~ paste(p.site),
p.type=="MR" ~ paste(p.site),
p.type=="AP" ~ paste(p.site,p.locname,sep="\n"),
p.type=="BB" ~ paste(p.site),
TRUE ~ NA)
img.x2 <- magick::image_annotate(img.x2, ne,
size = 25,
gravity = "northeast",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# southwest corner
sw <- paste(p.dt_photo)
img.x2 <- magick::image_annotate(img.x2, sw,
size = 25,
gravity = "southwest",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# southeast corner
se <- paste(p.lat,p.long,sep="\n")
img.x2 <- magick::image_annotate(img.x2, se,
size = 25,
gravity = "southeast",
font = "Helvetica",
color = "white",
strokecolor = "black",
weight = 900)
# Save photo
magick::image_write(img.x2, path = out.name, format = "jpg")
}
dump("watermark_wq",file="R/watermark_wq.R")
gdb_table_wq <- function(gdb_name, gdb_location, gdb_layer){
# Create path for gdb from location and name
gdb_path <- paste0(gdb_location, "/", gdb_name)
# Layer File with attributes
attributes <- sf::read_sf(gdb_path, gdb_layer)
# Attachments Table containing photos
layer_attach <- paste0(gdb_layer,"__ATTACH")
attachments <- sf::read_sf(gdb_path, layer_attach)
# Join the layer data with the _attach table
joined_table <- attachments %>%
dplyr::left_join(attributes, by = c("REL_GLOBALID" = "GlobalID"))
# Apply function to get coordinates for the joined_table
df <- joined_table$SHAPE
coords<- sf::st_coordinates(df)
# Make a date_time column appropriate for file names
joined_table <- joined_table %>%
dplyr::mutate(date_time_photo = as.character(CreationDate)) %>%
dplyr::mutate(date_time_file = lubridate::date(CreationDate))%>%
dplyr::mutate(date_time_file = str_replace_all(date_time_file,"-",""))%>%
cbind(coords)%>% #add the x,y,z coordinates
dplyr::mutate(hash = str_c(date_time_file,station_id,photo_subject)) %>% #creates a field called hash which has the fields that will be in filename
dplyr::group_by(hash) %>%
dplyr::mutate(duplication_id = seq(n())-1) %>% #checks for duplication of the filename hash field and add a sequence number for duplicates
dplyr::ungroup ()%>%
dplyr::mutate(tag = ifelse(duplication_id==0,"",paste0("_",duplication_id)), #replaces duplication id of zero with nothing
Location_Name = ifelse(is.na(Location_Name)," ",Location_Name), #replace NA in Location_Name with a space
file_month = lubridate::month(CreationDate)) #create a month field to select on later
return(joined_table)
}
dump("gdb_table_wq".file="R/gdb_table_wq.R")
dump("gdb_table_wq",file="R/gdb_table_wq.R")
process_watermark_wq <- funtion(gdb_name, gdb_location, gdb_layer,park,loctype,select_months=c(1,2,3,4,5,6,7,8,9,10,11,12),output_folder="watermarked"){
process_watermark_wq <- function(gdb_name, gdb_location, gdb_layer,park,loctype,select_months=c(1,2,3,4,5,6,7,8,9,10,11,12),output_folder="watermarked"){
t <- PACNAquaticWaterQuality::gdb_table_wq(gdb_name, gdb_location, gdb_layer)
t_select <- t%>%
dplyr::filter(unit_code==park,file_month%in%select_months)
apply(X = t_select, MARGIN = 1, FUN = PACNAquaticWaterQuality::watermark_wq, new_folder = output_folder)
}
dump("process_watermark_wq",file="R/precess_watermark_wq.R")
devtools::load_all()
devtools::check()
roxygen2::roxygenize()
devtools::load_all()
devtools::load_all()
roxygen2::roxygenize()
devtools::load_all()
devtools::unload()
devtools::load_all()
devtools::load_all()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all()
roxygen2::roxygenize()
load_all()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
packageVersion('devtools')
update.packages('devtools')
packageVersion('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
roxygen2::roxygenize()
devtools::load_all()
devtools::check()
usethis::use_mit_license()
devtools::load_all()
devtools::check()
devtools::intall()
devtools::install()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::install()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
devtools::load_all()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
devtools::install()
devtools::install()
roxygen2::roxygenise()
devtools::check()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
