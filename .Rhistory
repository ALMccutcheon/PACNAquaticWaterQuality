dir(".")
read.csv("data-raw/20200713_Results_Nutrients.csv")
nutdata<-read.csv("data-raw/20200713_Results_Nutrients.csv")
head(nutdata)
use_data(nutdata)
library(usethis)
use_data(nutdata)
use_rmarkdown_template("WQ Examples")
QAvgNutPlot<-function(x,param,main.title,y.label,axis.digits){
y.limits<-c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
nutdata2<- x %>%
filter(parameter==param)%>%
select(year,quarter,year_quarter,mean_value)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
nutdata3 <- left_join(alldates,nutdata2,join_by("year_quarter"))
limits<- aes(ymin=nutdata3$errordown,ymax=nutdata3$errorup)
avgplot <- qplot(year_quarter, average_value,
data=nutdata3,
xlab="Date",
ylab=y.label,
main=main.title)
maxi <-y.limits[2]
axis.digits <- ifelse(maxi<1,2,ifelse(maxi<10,2,ifelse(maxi<100,1,0)))
avgplotformatted <- avgplot +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
#save as jpeg
#ggsave(paste(param,"AvgGraph.jpg"),plot = avgplotformatted, width = 7, height = 5)
return(avgplot +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits)))
}
dump(QAvgNutPlot,file="R/QAvgNutPlot.R")
dump("QAvgNutPlot",file="R/QAvgNutPlot.R")
PACNAquaticWaterQuality:::QAvgNutPlot(nutdata,"TDN","TDN","TDN (mg/L)",2)
devtools::install()
install.packages("devtools")
library(devtools)
devtools::install()
PACNAquaticWaterQuality:::QAvgNutPlot(nutdata,"TDN","TDN","TDN (mg/L)",2)
library(tidyverse)
PACNAquaticWaterQuality:::QAvgNutPlot(nutdata,"TDN","TDN","TDN (mg/L)",2)
View(nutdata)
use_mit_license()
use_package("ggplot2")
use_package("dplyr")
use_package("lubridate",type="Suggests")
install.packages(roxygen2)
install.packages("roxygen2")
library(roxygen2)
roxygenize()
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
library(dplyr)
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
library(janitor)
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
library(tidyr)
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
library(tidyverse)
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
library(here)
kahocentralnutdata <- clean_names(read_csv(here("data","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
kahocentralnutdata <- clean_names(read_csv(here("data-raw","20240123_KAHO_ap_Central_Nutrients_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
use_data(kahocentralnutdata)
library(usethis)
use_data(kahocentralnutdata)
kahocentralysidata <- clean_names(read_csv(here("data-raw","20240123_KAHO_ap_Central_YSI_Certified.csv"),
col_types=cols("Pool_Group" = col_character())))%>% filter(qa_flag!=1)
use_data(kahocentralysidata)
devtools::install()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
devtools::install()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
devtools::install()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
load_all()
devtool::load_all()
devtools::load_all()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
devtools::load_all()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
library(tidyverse)
library(gtable)
detach("package:gtable", unload = TRUE)
library(gtable)
library(tidyverse)
library(janitor)
library(here)
library(usethis)
devtools::load_all()
PACNAquaticWaterQuality:::QAvgNutPlot(kahocentralnutdata,"TDN","TDN","TDN (mg/L)",2)
QAvgYsiPlot<-function(x,param,main.title,y.label,axis.digits){
yearquarters<-unique(x$year_quarter)
minyearquarter<-min(yearquarters)
maxyearquarter<-max(yearquarters)
yearquarterscomplete<-seq(minyearquarter,maxyearquarter,by=0.25)
alldates<-data.frame(list(year_quarter=yearquarterscomplete))
y.limits<-c(min(x[x$parameter==param,]$corrected_mean),max(x[x$parameter==param,]$corrected_mean))
ysidata2<- x %>%
filter(parameter==param)%>%
select(year,quarter,year_quarter,corrected_mean)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(corrected_mean), SE=sd(corrected_mean)/sqrt(length(corrected_mean)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
ysidata3 <- left_join(alldates,ysidata2,join_by("year_quarter"))
limits<- aes(ymin=ysidata3$errordown,ymax=ysidata3$errorup)
avgplot <- qplot(year_quarter, average_value,
data=ysidata3,
xlab="Date",
ylab=y.label,
main=main.title)
maxi <-y.limits[2]
axis.digits <- ifelse(maxi<1,2,ifelse(maxi<10,2,ifelse(maxi<100,1,0)))
avgplotformatted <- avgplot +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
#save as jpeg
#ggsave(paste(param,"AvgGraph.jpg"),plot = avgplotformatted, width = 7, height = 5)
return(avgplot +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits)))
}
dump("QAvgYsiPlot",file="R/QAvgYsiPlot.R")
devtools::load_all()
PACNAquaticWaterQuality:::QAvgYsiPlot(kahocentralysidata,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)
QAvgNutPlot_marine<-function(x,param,main.title,y.label,axis.digits){
yearquarters<-unique(x$year_quarter)
minyearquarter<-min(yearquarters)
maxyearquarter<-max(yearquarters)
yearquarterscomplete<-seq(minyearquarter,maxyearquarter,by=0.25)
alldates<-data.frame(list(year_quarter=yearquarterscomplete))
y.limits <- c(min(x[x$parameter==param,]$mean_value),max(x[x$parameter==param,]$mean_value))
surnutdata<- x %>%
filter(parameter==param&depth=="Surface")%>%
select(year,quarter,year_quarter,mean_value)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
surnutdata2 <- left_join(alldates,surnutdata,join_by("year_quarter"))
botnutdata<- x %>%
filter(parameter==param&depth=="Bottom")%>%
select(year,quarter,year_quarter,mean_value)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(mean_value), SE=sd(mean_value)/sqrt(length(mean_value)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
botnutdata2 <- left_join(alldates,botnutdata,join_by("year_quarter"))
nutdata2 <- rbind(data.frame(surnutdata2,"depth"=rep("Surface",nrow(surnutdata2))),data.frame(botnutdata2,"depth"=rep("Bottom",nrow(botnutdata2))))
limits<- aes(ymin=nutdata2$errordown,ymax=nutdata2$errorup)
avgplot <- qplot(year_quarter, average_value,
data=nutdata2,
xlab="Date",
ylab=y.label,
colour=depth,
main=main.title)
maxi <-y.limits[2]
axis.digits <- ifelse(maxi<1,2,ifelse(maxi<10,2,ifelse(maxi<100,1,0)))
avgplotformatted <- avgplot  +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
#save as jpeg
#ggsave(paste(param,"AvgGraph.jpg"),plot = avgplotformatted, width = 7, height = 5)
return(avgplot
+geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits)))
}
QAvgYsiPlot_marine<-function(x,param,main.title,y.label,axis.digits){
yearquarters<-unique(x$year_quarter)
minyearquarter<-min(yearquarters)
maxyearquarter<-max(yearquarters)
yearquarterscomplete<-seq(minyearquarter,maxyearquarter,by=0.25)
alldates<-data.frame(list(year_quarter=yearquarterscomplete))
y.limits <- c(min(x[x$parameter==param,]$corrected_mean),max(x[x$parameter==param,]$corrected_mean))
surysidata<- x %>%
filter(parameter==param&depth=="Surface")%>%
select(year,quarter,year_quarter,corrected_mean)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(corrected_mean), SE=sd(corrected_mean)/sqrt(length(corrected_mean)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
surysidata2 <- left_join(alldates,surysidata,join_by("year_quarter"))
botysidata<- x %>%
filter(parameter==param&depth=="Bottom")%>%
select(year,quarter,year_quarter,corrected_mean)%>%
group_by(year_quarter)%>%
summarize(year=mean(year),quarter=mean(quarter),average_value=mean(corrected_mean), SE=sd(corrected_mean)/sqrt(length(corrected_mean)))%>%
mutate(errorup=average_value+SE,errordown=average_value-SE)
botysidata2 <- left_join(alldates,botysidata,join_by("year_quarter"))
ysidata2 <- rbind(data.frame(surysidata2,"depth"=rep("Surface",nrow(surysidata2))),data.frame(botysidata2,"depth"=rep("Bottom",nrow(botysidata2))))
limits<- aes(ymin=ysidata2$errordown,ymax=ysidata2$errorup)
avgplot <- qplot(year_quarter, average_value,
data=ysidata2,
xlab="Date",
ylab=y.label,
colour=depth,
main=main.title)
maxi <-y.limits[2]
axis.digits <- ifelse(maxi<1,2,ifelse(maxi<10,2,ifelse(maxi<100,1,0)))
avgplotformatted <- avgplot  +geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits))
#save as jpeg
#ggsave(paste(param,"AvgGraph.jpg"),plot = avgplotformatted, width = 7, height = 5)
return(avgplot
+geom_errorbar(limits)+scale_y_continuous(limits=y.limits,labels = function(x) format(x, nsmall = axis.digits)))
}
dump("QAvgYsiPlot_marine",file="R/QAvgYsiPlot_marine.R")
dump("QAvgNutPlot_marine",file="R/QAvgNutPlot_marine.R")
ComboPlotFunc <- function(data1,data2,type="Non-Marine",years=c(2009,2011,2013,2015,2017,2019),yearrange=c(2008,2022),graphtitle="Water Quality at Selected Park and Resource"){
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",plot.title = element_text(size=10)),scale_x_continuous(breaks=years, limits=yearrange))
my_theme_avg_marine<- list(geom_line(),geom_point(),scale_colour_manual(values=c("red","blue")),theme_bw(),
theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",,plot.title = element_text(size=10)),scale_x_continuous(breaks=years,limits=yearrange))
if(type=="Marine"){
TDNAvg<-QAvgNutPlot_marine(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg_marine()
TDPAvg<-QAvgNutPlot_marine(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg_marine()
NO3Avg<-QAvgNutPlot_marine(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg_marine()
ChlAvg<-QAvgYsiPlot_marine(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg_marine()
pHAvg<-QAvgYsiPlot_marine(data2,"pH","pH","pH",2)+my_theme_avg_marine()
SalAvg<-QAvgYsiPlot_marine(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg_marine()
ODOConcAvg<-QAvgYsiPlot_marine(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg_marine()
ODOSatAvg<-QAvgYsiPlot_marine(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg_marine()
SpCondAvg<-QAvgYsiPlot_marine(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg_marine()
TempAvg<-QAvgYsiPlot_marine(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg_marine()
TurbidAvg<-QAvgYsiPlot_marine(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg_marine()
}else{
#####
#### Make Average Plots for all parameters ####
# Adjust main title, axis title, and number of digits on the y axis as needed
TDNAvg<-QAvgNutPlot(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg()
TDPAvg<-QAvgNutPlot(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg()
NO3Avg<-QAvgNutPlot(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg()
ChlAvg<-QAvgYsiPlot(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg()
pHAvg<-QAvgYsiPlot(data2,"pH","pH","pH",2)+my_theme_avg()
SalAvg<-QAvgYsiPlot(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg()
ODOConcAvg<-QAvgYsiPlot(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg()
ODOSatAvg<-QAvgYsiPlot(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg()
SpCondAvg<-QAvgYsiPlot(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg()
TempAvg<-QAvgYsiPlot(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg()
TurbidAvg<-QAvgYsiPlot(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg()
}
#### Combination Graphs ####
# Plots for the nine main parameters on one page
# Adjust the plot titles.
return(grid.arrange(TDNAvg,TDPAvg,NO3Avg,ChlAvg,pHAvg,SalAvg,TempAvg,TurbidAvg,ODOSatAvg,ncol=3,top=graphtitle))
}
dump("ComboPlotFunc",file="R/ComboPlotFunc.R")
devtools::load_all()
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",plot.title = element_text(size=10)),scale_x_continuous(breaks=years, limits=yearrange))
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",plot.title = element_text(size=10)),scale_x_continuous(breaks=years, limits=c(2008,2022)))
ComboPlotFunc <- function(data1,data2,type="Non-Marine",years=c(2009,2011,2013,2015,2017,2019),yearrange=c(2008,2022),graphtitle="Water Quality at Selected Park and Resource"){
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",plot.title = element_text(size=10)),scale_x_continuous(breaks=years, limits=yearrange))
my_theme_avg_marine<- list(geom_line(),geom_point(),scale_colour_manual(values=c("red","blue")),theme_bw(),
theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",,plot.title = element_text(size=10)),scale_x_continuous(breaks=years,limits=yearrange))
if(type=="Marine"){
TDNAvg<-QAvgNutPlot_marine(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg_marine()
TDPAvg<-QAvgNutPlot_marine(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg_marine()
NO3Avg<-QAvgNutPlot_marine(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg_marine()
ChlAvg<-QAvgYsiPlot_marine(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg_marine()
pHAvg<-QAvgYsiPlot_marine(data2,"pH","pH","pH",2)+my_theme_avg_marine()
SalAvg<-QAvgYsiPlot_marine(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg_marine()
ODOConcAvg<-QAvgYsiPlot_marine(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg_marine()
ODOSatAvg<-QAvgYsiPlot_marine(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg_marine()
SpCondAvg<-QAvgYsiPlot_marine(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg_marine()
TempAvg<-QAvgYsiPlot_marine(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg_marine()
TurbidAvg<-QAvgYsiPlot_marine(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg_marine()
}else{
#####
#### Make Average Plots for all parameters ####
# Adjust main title, axis title, and number of digits on the y axis as needed
TDNAvg<-QAvgNutPlot(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg()
TDPAvg<-QAvgNutPlot(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg()
NO3Avg<-QAvgNutPlot(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg()
ChlAvg<-QAvgYsiPlot(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg()
pHAvg<-QAvgYsiPlot(data2,"pH","pH","pH",2)+my_theme_avg()
SalAvg<-QAvgYsiPlot(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg()
ODOConcAvg<-QAvgYsiPlot(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg()
ODOSatAvg<-QAvgYsiPlot(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg()
SpCondAvg<-QAvgYsiPlot(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg()
TempAvg<-QAvgYsiPlot(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg()
TurbidAvg<-QAvgYsiPlot(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg()
}
#### Combination Graphs ####
# Plots for the nine main parameters on one page
# Adjust the plot titles.
return(grid.arrange(TDNAvg,TDPAvg,NO3Avg,ChlAvg,pHAvg,SalAvg,TempAvg,TurbidAvg,ODOSatAvg,ncol=3,top=graphtitle))
}
dump("ComboPlotFunc",file="R/ComboPlotFunc.R")
devtools::load_all()
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
ComboPlotFunc <- function(data1,data2,type="Non-Marine",years=c(2009,2011,2013,2015,2017,2019),yearrange=c(2008,2022),graphtitle="Water Quality at Selected Park and Resource"){
my_theme_avg<- list(geom_line(),geom_point(),theme_bw(), theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",plot.title = element_text(size=10)),scale_x_continuous(breaks=years, limits=yearrange))
my_theme_avg_marine<- list(geom_line(),geom_point(),scale_colour_manual(values=c("red","blue")),theme_bw(),
theme(panel.grid.major = element_line(color = NA),panel.grid.minor =  element_line(color = NA),legend.position="none",,plot.title = element_text(size=10)),scale_x_continuous(breaks=years,limits=yearrange))
if(type=="Marine"){
TDNAvg<-QAvgNutPlot_marine(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg_marine
TDPAvg<-QAvgNutPlot_marine(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg_marine
NO3Avg<-QAvgNutPlot_marine(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg_marine
ChlAvg<-QAvgYsiPlot_marine(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg_marine
pHAvg<-QAvgYsiPlot_marine(data2,"pH","pH","pH",2)+my_theme_avg_marine
SalAvg<-QAvgYsiPlot_marine(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg_marine
ODOConcAvg<-QAvgYsiPlot_marine(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg_marine
ODOSatAvg<-QAvgYsiPlot_marine(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg_marine
SpCondAvg<-QAvgYsiPlot_marine(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg_marine
TempAvg<-QAvgYsiPlot_marine(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg_marine
TurbidAvg<-QAvgYsiPlot_marine(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg_marine
}else{
#####
#### Make Average Plots for all parameters ####
# Adjust main title, axis title, and number of digits on the y axis as needed
TDNAvg<-QAvgNutPlot(data1,"TDN","TDN","TDN (mg/L)",2)+my_theme_avg
TDPAvg<-QAvgNutPlot(data1,"TDP","TDP","TDP (mg/l)",0)+my_theme_avg
NO3Avg<-QAvgNutPlot(data1,"NO3",expression("NO"[3]^"-"*"+NO"[2]^"-"),expression("NO"[3]^"-"*"+NO"[2]^"-"*" (mg/l)"),0)+my_theme_avg
ChlAvg<-QAvgYsiPlot(data2,"Chl","Chlorophyll","Chlorophyll (ug/L)",1)+my_theme_avg
pHAvg<-QAvgYsiPlot(data2,"pH","pH","pH",2)+my_theme_avg
SalAvg<-QAvgYsiPlot(data2,"Sal","Salinity","Salinity (ppt)",2)+my_theme_avg
ODOConcAvg<-QAvgYsiPlot(data2,"ODOConc","Dissolved Oxygen Concentration","DO Concentration (mg/L)",1)+my_theme_avg
ODOSatAvg<-QAvgYsiPlot(data2,"ODOSat","Dissolved Oxygen Saturation","DO (% Saturation)",1)+my_theme_avg
SpCondAvg<-QAvgYsiPlot(data2,"SpCond","Specific Conductivity","Specific Conductivity (uS/cm)",2)+my_theme_avg
TempAvg<-QAvgYsiPlot(data2,"Temp","Temperature",expression(paste("Temperature (",degree,"C)")),1)+my_theme_avg
TurbidAvg<-QAvgYsiPlot(data2,"Turbid+","Turbidity","Turbidity (NTU)",1)+my_theme_avg
}
#### Combination Graphs ####
# Plots for the nine main parameters on one page
# Adjust the plot titles.
return(grid.arrange(TDNAvg,TDPAvg,NO3Avg,ChlAvg,pHAvg,SalAvg,TempAvg,TurbidAvg,ODOSatAvg,ncol=3,top=graphtitle))
}
dump("ComboPlotFunc",file="R/ComboPlotFunc.R")
devtools::load_all()
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
use_package("gridExtra")
devtools::load_all()
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
devtools::install()
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
help(grid.arrange)
library(tidyverse)
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
library(gridExtra)
PACNAquaticWaterQuality:::ComboPlotFunc(kahocentralnutdata,kahocentralysidata)
View(QAvgYsiPlot)
roxygen2::roxygenize()
load("~/PACNAquaticWaterQuality/data/kahocentralnutdata.rda")
use_r("kahocentralnutdata")
use_r("kahocentralysidata")
load("~/PACNAquaticWaterQuality/data/kahocentralysidata.rda")
roxygen2::roxygenize()
devtools::check()
check()
devtools::check()
roxygenize()
roxygen2::roxygenize()
devtools::check()
devtools::check()
devtools::check()
use_r("kahocentralnutdata")
usethis::use_r(kahocentralnutdata)
usethis::use_r("kahocentralnutdata")
load("~/PACNAquaticWaterQuality/data/kahocentralnutdata.rda")
View(kahocentralnutdata)
load("~/PACNAquaticWaterQuality/data/kahocentralysidata.rda")
usethis::use_r("kahocentralysidata")
View(kahocentralysidata)
roxygen2::roxygenize()
devtools::check()
devtools::check()
